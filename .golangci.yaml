issues:
  exclude-rules:
    - path: /
      linters:
        - typecheck

linters:
  disable-all: true
  enable:
    - errcheck # Detect unchecked errors
    - gosimple # Suggest code simplifications
    - govet # Reports suspicious constructs
    - ineffassign # Detects unused variables
    - staticcheck # Go vet on steroids
    - typecheck # Standard go type checks
    - unused # Detect unused constants, variables, functions, and types.

    # suggest optional linters
    - gocyclo # Or gocyclop # Detect cyclomatic complexity
    - goconst # Detect repeated values that can be made constants
    - gofumpt # Or gofmt # Enforce standard formatting
    - goimports #Ensure standard import formatting/ordering
    - misspell # Fix Spelling Errors
    - revive # General purpose linter
    - unconvert # Detect unnecessary type conversions
    - unparam # Detect unused function parameters
    - whitespace

      #Optional
    - bodyclose  #Check Whether HTTP Response bodies are closed
    - nakedret # Detect naked returns
    - tparallel # Detects inappropriate use of t.Parallel()

output:
  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  format: colored-line-number
    # Print lines of code with issue.
    # Default: true
  print-issued-lines: true
    # Print linter name in the end of issue text.
    # Default: true
  print-linter-name: true
    # Make issues output unique by line.
    # Default: true
  uniq-by-line: true
    # Add a prefix to the output file references.
    # Default: ""
  path-prefix: ""
    # Sort results by: filepath, line and column.
    # Default: false
  sort-results: true